{"version":3,"file":"static/js/84.9e400c9e.chunk.js","mappings":"8VAEMA,EAAS,mCAER,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACSC,EAAAA,EAAAA,IAAA,kEAAqEF,IAAUG,MAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAKC,OAAhB,IADnG,0GAIA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,iFACSN,EAAAA,EAAAA,IAAA,4DAA+DF,EAA/D,iCAA8FQ,EAA9F,gCAAqIL,MAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAKC,OAAhB,IADzJ,0GAIA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,iFACSR,EAAAA,EAAAA,IAAA,6CAAgDQ,EAAhD,oBAAkEV,EAAlE,oBAA2FG,MAAK,SAAAC,GAAM,OAAIA,EAAOC,IAAX,IAD/G,0GAIA,SAASM,EAAYC,EAASC,GAClC,MAAM,+BAAN,OAAsCA,EAAtC,YAAiDD,EACnD,CAEM,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,uFAEkBb,EAAAA,EAAAA,IAAA,gEAAmEF,EAAnE,oBAA4FG,MAAK,SAAAa,GAAG,OAAGA,EAAIX,KAAKY,MAAZ,IAFtH,cAEEC,EAFF,yBAIGA,EAAQC,QAAQ,SAACC,EAAKC,GAE1B,OADIN,EAAUO,SAASD,EAAQE,KAAMH,EAAII,KAAKH,EAAQI,MAC/CL,CACT,GAAE,KAPC,kEAUA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA6BhB,GAA7B,iFACSR,EAAAA,EAAAA,IAAA,6CAAgDQ,EAAhD,4BAA0EV,EAA1E,oBAAmGG,MAAK,SAAAC,GAAM,OAAIA,EAAOC,IAAX,IADvH,0GAIA,SAAesB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCjB,GAAhC,iFACSR,EAAAA,EAAAA,IAAA,6CAAgDQ,EAAhD,4BAA0EV,EAA1E,2BAA0GG,MAAK,SAAAC,GAAM,OAAIA,EAAOC,IAAX,IAD9H,0G,+ECjCP,GAAiB,E,oCC2BjB,EAvBgB,WAEZ,OAA8BuB,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAUC,EAAAA,EAAAA,MAAYT,GAM5B,OAJAU,EAAAA,EAAAA,YAAU,YACNN,EAAAA,EAAAA,IAAgBI,GAAS5B,MAAK,SAAAa,GAAG,OAAIc,EAAWd,EAAIV,QAAnB,IAA6B4B,OAAM,kBAAMC,MAAM,yBAAZ,GACvE,GAAC,CAACJ,KAGC,eAAIK,UAAYC,EAAAA,QAAhB,SACMR,EAAQS,OAAS,EACjBT,EAAQU,KAAI,SAAClB,GAAY,OAAO,2BAChC,cAAGe,UAAYC,EAAAA,QAAf,0BAAuChB,EAAQmB,WAC/C,uBAAKnB,EAAQoB,YCAd,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfnB,EAAK,GACLoB,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfnB,GADEwB,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOxB,CACR,CDlBwD2B,GAGrC,KACN,mDAKb,C","sources":["components/modules/Api/moviesApi.js","webpack://react-homework-template/./src/components/modules/Reviews/reviews.modile.css?a240","components/modules/Reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from \"axios\";\n\nconst apiKey = 'cc6dd9af32d8d8ae276f4cac0bcc6f4a';\n\nexport async function trendingMovies () {\n   return await axios.get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`).then(result => result.data.results);\n};\n\nexport async function getMoviesByName (filmName) {\n   return await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&query=${filmName}&page=1&include_adult=false`).then(result => result.data.results);\n};\n\nexport async function getMovieInfo (filmid) {\n   return await axios.get(`https://api.themoviedb.org/3/movie/${filmid}?api_key=${apiKey}&language=en-US`).then(result => result.data);\n};\n\nexport function getImageUrl(imgName, imgSize) {\n   return `https://image.tmdb.org/t/p/w${imgSize}/${imgName}`;\n};\n\nexport async function getGenresList(genresIds) {\n   \n   const request = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${apiKey}&language=en-US`).then(res=> res.data.genres);\n\n   return request.reduce ((acc, element) => {\n      if (genresIds.includes(element.id)){ acc.push(element.name) }     \n      return acc;\n   }, []); \n};\n\nexport async function getMovieCast (filmid) {\n   return await axios.get(`https://api.themoviedb.org/3/movie/${filmid}/credits?api_key=${apiKey}&language=en-US`).then(result => result.data);\n};\n\nexport async function getMovieReviews (filmid) {\n   return await axios.get(`https://api.themoviedb.org/3/movie/${filmid}/reviews?api_key=${apiKey}&language=en-US&page=1`).then(result => result.data);\n};","// extracted by mini-css-extract-plugin\nexport default {};","import s from \"./reviews.modile.css\"\nimport { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { getMovieReviews } from \"..//Api/moviesApi\";\nconst Reviews = () => {\n\n    const [reviews, setReviews] = useState([]);\n    const movieId = useParams().id;\n\n    useEffect(()=>{\n        getMovieReviews(movieId).then(res => setReviews(res.results)).catch(() => alert('Some problems with API'));\n    },[movieId]);\n\n    return (\n        <ul className ={s.listrev}>\n            { reviews.length > 0 ? \n              reviews.map((element)=>{ return <li  key={ nanoid() }>\n              <p className={ s.revAuth }>{`Autor: ${ element.author }`}</p>\n              <p>{ element.content }</p>\n              </li>}) :\n              <li>There are no reviews.</li>\n            } \n        </ul>\n\n    )\n};\n\nexport default Reviews;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["apiKey","trendingMovies","axios","then","result","data","results","getMoviesByName","filmName","getMovieInfo","filmid","getImageUrl","imgName","imgSize","getGenresList","genresIds","res","genres","request","reduce","acc","element","includes","id","push","name","getMovieCast","getMovieReviews","useState","reviews","setReviews","movieId","useParams","useEffect","catch","alert","className","s","length","map","author","content","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid"],"sourceRoot":""}